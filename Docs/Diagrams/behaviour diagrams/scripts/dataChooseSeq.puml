@startuml
actor User as u
participant DataAccessController as DAC
participant ExperimentBuilder as EB

activate u
activate ExperimentConfigurationPresenter
activate Service
activate EB
activate JsonLoader


ExperimentConfigurationPresenter -> ExperimentConfigurationPresenter : [displays the available algorithms in the list builder element]
u -> ExperimentConfigurationPresenter : [clicks "Start Experiment"]

note left
    user selected the desired
    problems in the list
    builder GUI element
end note

alt Json files describing problems are available in the system

    ref over Service : Choosing Algorithms UseCase

    ExperimentConfigurationPresenter -> Service : setProblemsToExperiment(List<problemNames: String>)

    activate DAC
    Service -> DAC : getProblems(List<problemNames: String>)

    DAC -> JsonLoader : getProblems(List<problemNames: String>)

    JsonLoader -> JsonLoader : loadDevices()

    JsonLoader --> DAC : [List<Problem>]

    DAC -->Service : [List<Problem>]
    Service -> EB : setProblems(List<Problem>)
    Service --> ExperimentConfigurationPresenter

    ref over ExperimentConfigurationPresenter : Run Experiment UseCase

else no available Json files describing problems in the system

    ExperimentConfigurationPresenter --> u : [the list of available algorithms will be empty]

else one or more of the Json files is not a valid problem

    ref over Service : Choosing Algorithms UseCase

    ExperimentConfigurationPresenter -> Service : setProblemsToExperiment(List<problemNames: String>)

    activate DAC
    Service -> DAC : getProblems(List<problemNames: String>)

    DAC -> JsonLoader : getProblems(List<problemNames: String>)

    JsonLoader -> JsonLoader : loadDevices()

    JsonLoader -> ExperimentConfigurationPresenter : [throws an exception]
    ExperimentConfigurationPresenter --> u : [shows an error message]
end



@enduml