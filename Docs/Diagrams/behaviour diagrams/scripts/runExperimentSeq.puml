@startuml
actor User as u
collections Agent
participant DataAccessController as DAC
participant DataControllerCommunicator as DCC
participant DataControllerCommunicatorAgentBehaviour as DCCB
participant ExperimentConfigurationPresenter as ConfP
participant ExperimentRunningPresenter as RunP

note over u, Experiment #aqua
    please note: this is a (relatively accurate) abstraction of the UseCase due the high complexity of the use case's implementation
end note

activate u
activate UiHandler
activate ConfP
activate Service
activate Agent
activate AgentBehaviour
activate Problem
activate ExperimentBuilder
activate RunP

note right of Jade
    This is an abstraction
    for the use in jade,
    no need to show every
    jade class as a participant
end note

u -> ExperimentConfigurationPresenter : [clicks "Start Experiment"]

alt user selected a set of algorithm and problems

    ref over u : algorithms selection use case
    ref over u : problems selection use case

    ExperimentConfigurationPresenter -> Service : runExperiment()
    Service -> ExperimentBuilder : createExperiment()
    ExperimentBuilder -> Experiment : <<create>>
    activate Experiment
    ExperimentBuilder --> Service : Experiment
    Service -> Experiment : runExperiment()

    ConfP -> RunP : [navigate to experiment progress view]


    Experiment -> Jade : getInstance()
    activate Jade

    '/////////create the collection mechanism
    Experiment -> Jade : createAgent(DataControllerCommunicator)
    Jade -> DCC : <<create>>
    activate DCC
    Jade --> Experiment : [DataCollectorCommunicator]
    Experiment -> DCC : start()
    DCC -> DCCB : <<create>>
    activate DCCB
    DCCB -> DataCollector : <<create>>
    activate DataCollector

    alt the user let the experiment run till it ends

        loop for each Problem
            loop for each algorithm

                '/////////run agents
                loop for each agent
                    Experiment -> AgentBehaviour : cloneBehavior()
                    AgentBehaviour --> Experiment : [AgentBehaviour]
                    Experiment -> Jade : createAgent(AgentBehaviour)
                    Jade --> Experiment : [Agent]
                    Experiment -> Agent : start()

                end
                loop until the running algorithm has converged
                    AgentBehaviour -> AgentBehaviour : doIteration()
                    note over AgentBehaviour
                        the abstract instance
                        of agent behaviour
                        invokes the concrete
                        algorithm instance's
                        method
                    end note

                    '// send iteration data to neighbours
                    AgentBehaviour -> Agent : send(ACLMessage)
                    Agent -> Agent : [IterationCollectedData]
                    note left
                        as part of each
                        iteration, agents
                        send the data of
                        the latest iteration
                        to other agents
                    end note

                    '// send iteration data to data collector
                    AgentBehaviour -> Agent : send(ACLMessage)
                    Agent -> DCC : [IterationCollectedData]
                    note left
                        the agent sends
                        the data of
                        the latest iteration
                        to other agents
                    end note

                    DCCB -> DCC : send(ACLMessage)
                    DCC -> Agent : [double]
                    note over DCC
                        once all agents
                        sent their data
                        of the latest iteration
                        the data collector
                        can complete its
                        calculation and send
                        the result to the all
                        of the agents
                    end note

                    break iterationNumber >= max iterations that was set by the user
                    end
                end

                DCCB -> Experiment : algorithmProblemComboRunEnded(AlgorithmProblemResult)
            end

            Experiment -> Experiment : restartJade()
        end

        Experiment ->x Jade : <<terminate>>
        deactivate Jade

        Experiment -> Service : experimentEnded(List<AlgorithmProblemResult> results, Map<String, Map<Integer, Long>>  probToAlgoTotalTime)

        Service -> UiHandler : showResultScreen(List<AlgorithmProblemResult> experimentResults, Map<String, Map<Integer, Long>> probToAlgoTotalTime)

        ref over UiHandler : show results use case

    else while running the experiment the user stops it, at any point

        activate Problem
        activate Jade

        u -> RunP : [clicks on "stop experiment" button]
        RunP -> Service : stopExperiment()
        note left
            this alternative is identical
            to the one above, only the
            following actions in the
            fragment can happen at any point
        end note
        Service -> Experiment : stop()

        loop for each agent
            Experiment -> Agent : kill()
        end

        deactivate Agent
        Experiment ->x Jade : <<terminate>>
        deactivate Jade

        RunP -> ConfP : [vavigate to the Main Window]
    end

    deactivate Problem

else user did not select a set of problems or a set of algorithms

    ConfP --> u : [shows a descriptive error message over the relevant UI component]

end
@enduml