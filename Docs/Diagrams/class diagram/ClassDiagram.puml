@startuml
scale 0.5
skinparam linetype ortho
skinparam pageExternalColor white
skinparam dpi 90
left to right direction
skinparam classFontSize 20
skinparam DefaultFontSize 20
skinparam PackageBorderThickness 3
skinparam Padding 5

package BL #efefef{

	package JADE <<External library>> #c7cced{

		abstract class Agent <<Abstract, JADE>> {
		    {abstract} #Setup() : void
		    addBehaviour(Behaviour b) : void
		}

		abstract class Behaviour <<Abstract, JADE>>
		Behaviour -- Agent

		class DFAgentDescription
	}

	package DataObjects #c7cced{
		together {
			class Device {
				+name : String
				+subtype : String
				+location : String
			}

			class Sensor {
				+currState : double
				+sensingProperties : List<String>
				+change(double) : void
			}

			class Actuator {
				+act(Map<Sensor, double>) : void
			}
		}

		together {
			class Effect {
				+property : String
				+delta : double
			}

			class Action {
				+name : String
				+powerConsumption : double
			}
		}

		together {
			enum RelationType {
			EQ
			GEQ
			LEQ
			GT
			LT
			}

			enum Prefix {
				BEFORE
				AFTER
				AT
			}

			class Rule {
				+isActive : boolean
				+property : String
				+ruleValue : double
				+relationValue : double
				+location : String
				+prefixType : PrefixType
				+prefix : Prefix
			}
		}

		'agentdata and problem'
		together {
			class AgentData {
				+name : String
				+backgroundLoad : double[Problem.horizon]
				+priceSchema : double[Problem.horizon]
				+houseType : int
				+numOfIterations : int
				+priceScheme : double[]
				+granularity : int
			}

			class Problem {
				id : String
				allDevices : Map<Integer, List<Device>>
				horizon : int
				granularity : int
				priceScheme : double[horizon]
			}
		}

		Device <|- Sensor
		Device <|-- Actuator

		Action *-down- Effect
		Actuator *-down- Action

		Problem *-- AgentData
		Problem *-- Device
		AgentData *-- Sensor
		AgentData *-- Actuator
		AgentData *-down- AgentData
		AgentData *- Rule

		Prefix <-- Rule
		RelationType <-- Rule
		Rule o-- Device
	}

	package Agents #c7cced{

		'helpers'
		together {
			class AlgorithmDataHelper {
				+totalPriceConsumption : double
				+ePeak : double
				+DeviceToTicks : Map<Actuator, Map<Action, List<Integer>>>
				+neighboursPriceConsumption : List<double[]>
				
				+buildNewPropertyData(Rule, boolean) : void
				+setActuatorsAndSensors() : void
				+getSubsets(List<Integer>, int) : List<Set<int>>
				+calcPriceSchemeForAllNeighbours() : void
				+calcPriceSchemeForAllNeighbours(List<double[]>) : void
				+calcHowLongDeviceNeedToWork(PropertyWithData) : double
				+calcTotalPowerConsumption(double, double[]) : double
				+calcAndSetTotalPowerConsumption(double) : void
				+calcTotalPowerConsumption(double) : double
				+correctEpeak(double[], double[]) : void
				+checkForPassiveRules() : void
				+goBackToStartValues() : void
				+coneArray(double[]) : double[]
				+coneList(List) : List
				+resetProperties() : void
			}

			class PropertyWithData {
				+name : String
				+min : double
				+max : double
				+targetValue : double
				+targetTick : double
				+deltaWhenWork : double
				+isPasiveOnly : boolean
				+powerConsumedInWork : double
				+deltaWhenWorkOffline : double
				+isLocation : boolean
				+relatedSensorsDelta : Map<String,Double>
				+relatedSensorsWhenWorkOfflineDelta : Map<String,Double>
				+prefix : Prefix
				+rt : RelationType
				+activeTicks : List<int>
				+cachedSensorState : double

				+calcAndUpdateCurrState(double, double, double[], boolean) : void
				+updateValueToSensor(double[], double, double, int, boolean) : double
			}
		}

		'agent'
		together {
			class SmartHomeAgent {
				..static fields..
				+{static} SERVICE_TYPE : String
				+{static} SERVICE_NAME : String
				+{static} MESSAGE_TEMPLATE_SENDER_IS_COLLECTOR : MessageTemplate
				+{static} MESSAGE_TEMPLATE_SENDER_IS_AMS : MessageTemplate
				+{static} MESSAGE_TEMPLATE_SENDER_IS_NEIGHBOUR : MessageTemplate
				..
				+currIteration : AgentIterationData
				+iterationNum : int
				+isZEROIteration : boolean
				+priceSum : double
				+problemId : String
				+algoId : String
				+iterationMessageSize : long
				+iterationMessageCount : int

				..inharited from Jade..
				#setup() : void
				#takeDown() : void
			}


			abstract class SmartHomeAgentBehaviour {
				#{static} FINAL_TICK : int
				#currentNumberOfIter: int
				#iterationPowerConsumption: double[]
				#tempPriceConsumption: double
				#improvementTemplate : MessageTemplate
				#propToSubsetsMap : Map<PropertyWithData, List<Set<Integer>>>
				#propToSensorsToChargeMap : Map<PropertyWithData, Map<String,Integer>>
				--
				..inharited from Jade..
				+action() : void
				+done() : boolean
				..abstract methods..
				+{abstract} cloneBehaviour() : SmartHomeAgentBehaviour
				#{abstract} doIteration() : void
				#{abstract} onTermination() : void
				#{abstract} generateScheduleForProp(PropertyWithData, double, Map<String, Integer>, boolean) : void
				#{abstract} cloneBehaviour() : SmartHomeAgentBehaviour
				#{abstract} calcImprveOptionGrade(double[], List<double[]>) : double
				..non-abstract methods..
				+buildScheduleFromScratch() : void
				#getNeighbourScheds : List<double[]>
				#resetToPrevIterationData(...) : void
				#countIterationCommunication() : void
				#sendIterationToCollector() : void
				#sendIterationToNeighbors() : void
				#sendMsgToAllNeighbors(Serializable, String) : void
				#waitForNeighbourMessages(MessageTemplate) : List<ACLMessage>
				#readNeighbourMsgs(List<ACLMessage>) : void
				#initHelper() : void
				#calcPrice(double[]) : double
				#calcCsum(double[]) : double
				#initializeBehaviourWithAgent(SmartHomeAgent) : void
				#addBackgroundLoadToPriceScheme(double[]) : void
				#buildScheduleBasic(boolean) : void
				#calcHowManyTicksNeedToCharge(String, double, double) : int
				#drawRandomNum(int, int) : int
				#flipCoin(float) : boolean
				#updateTotals(PropertyWithData, Map<String, Integer>, double): void
				#startWorkZERO(PropertyWithData, Map<String, Integer>, double): void
				#startWorkNonZeroIter(PropertyWithData, Map<String, Integer>, double): void
				#calcRangeOfWork(PropertyWithData): List<int>
				#calcBestPrice(PropertyWithData, List<Set<Integer>>): List<int>
				#beforeIterationIsDone(): void
				#addMessagesSentToDevicesAndSetInAgent(int, long, int) : void
				#receiveNeighboursIterDataAndHandleIt() : void
				#initMsgTemplate() : void
				#receiveImprovementMsgs() : List<ImprovementMsg>
				#sendImprovementToNeighbours(double, double[]) : ImprovementMsg
				#checkAllSubsetOptions(PropertyWithData) : List<Set<Integer>>
				#getSubsetsForProp(PropertyWithData, double) : List<Set<Integer>>
				#getTicksForProp(PropertyWithData) : List<int>
			}
		}

		Note "action(){\n\tdoIteration();\n\tsendIterationToCollector();\n\tsendIterationToNeighbrs();}\n}" as smabNote
		
		'algos:'
		together {
			class SHMGM {
				+doIteration() : void
				+onTermination() : void
				+countIterationCommunication() : void
				+generateScheduleForProp(PropertyWithData, double, Map<String, Integer>, boolean) : void
				+cloneBehaviour() : SmartHomeAgentBehaviour
				+calcImprveOptionGrade(double[], List<double[]>) : double
			}

			class DSA {
				+doIteration() : void
				+onTermination() : void
				+countIterationCommunication() : void
				+generateScheduleForProp(PropertyWithData, double, Map<String, Integer>, boolean) : void
				+cloneBehaviour() : SmartHomeAgentBehaviour
				+calcImprveOptionGrade(double[], List<double[]>) : double
			}

			class SA {
				+doIteration : void
				+onTermination() : void
				+countIterationCommunication() : void
				+generateScheduleForProp(PropertyWithData, double, Map<String, Integer>, boolean) : void
				+cloneBehaviour() : SmartHomeAgentBehaviour
				+calcImprveOptionGrade(double[], List<double[]>) : double
			}

			class DBA {
				+doIteration() : void
				+onTermination() : void
				+countIterationCommunication() : void
				+generateScheduleForProp(PropertyWithData, double, Map<String, Integer>, boolean) : void
				+cloneBehaviour() : SmartHomeAgentBehaviour
				+calcImprveOptionGrade(double[], List<double[]>) : double
			}
		}

		class ImprovementMsg {
			+agentName : String
			+improvement : double
			+imprevedSched : double[]
			+prevSched : double[]
		}


		Agent <|-- SmartHomeAgent
		SmartHomeAgentBehaviour --|> Behaviour
		SmartHomeAgent --> SmartHomeAgentBehaviour

		SmartHomeAgentBehaviour . smabNote

		SmartHomeAgentBehaviour <|-- SHMGM
		SmartHomeAgentBehaviour <|-- DSA
		SmartHomeAgentBehaviour <|-- SA
		SmartHomeAgentBehaviour <|-- DBA

		SmartHomeAgentBehaviour o-- SmartHomeAgent
		SmartHomeAgentBehaviour o-- AlgorithmDataHelper
		SmartHomeAgentBehaviour o-- ImprovementMsg

		DSA --> AlgorithmDataHelper
		DSA --> PropertyWithData

		AlgorithmDataHelper o- PropertyWithData
		AlgorithmDataHelper o-- SmartHomeAgent

		PropertyWithData *-up- Sensor
		PropertyWithData *- Actuator
	}

	package IterationData #c7cced{

		class AgentIterationData {
			+iterNum : int
			+agentName : String
			+price : double
			+powerConsumptionPerTick : double[]
		}

		class IterationCollectedData {
			+problemId : String
			+algorithm : String
			+neighborhood : Set<String>
			+ePeak : double
			+messageSize: long
			+msgCount: int
		} 

		AgentIterationData <|-- IterationCollectedData
	}

	package DataCollection #c7cced{

		class PowerConsumptionUtils <<Static>> {
			+{static} AE : double
			+{static} AC : double
			+{static} calculateCSum(List<double[]>, double[]) : double
			+{static} calculateTotalConsumptionWithPenalty(double, double[], double[], List<double[]>, double[]) : double
			+{static} calculateTotalConsumptionWithPenalty(double, List<double[]>) : double
			+calculateEPeak(List<double[]>) : double
		}

		'collectors'
		together {
			class DataCollector {
			    +numOfAgentsInProblems : Map<String, int>
			    +probAlgoToItAgentPrice : Map<ProblemAlgorithm, IterationAgentsPrice>
			    +probAlgoToResult : Map<ProblemAlgorithm, AlgorithmProblemResult>
			    +probToPriceScheme : Map<String, double[]>

			    +addData(IterationCollectedData) : void    
			}

			class DataCollectionCommunicator {
				+{static} SERVICE_TYPE : String
				+{static} SERVICE_NAME : String
				+experiment : Experiment
				+collector : DataCollector

				#setup() : void
				#takeDown() : void
			}

			class DataCollectionCommunicatorBehaviour {
				+action() : void
			}
		}

		class StatisticsHandler {
			+getTotalPowerConsumption(): Map<String, List<Double>>
			+totalConsumption(String) : DefaultStatisticalCategoryDataset
			+totalConsumptionAnyTime(String) : DefaultStatisticalCategoryDataset
			+lowestAgent(String) : DefaultStatisticalCategoryDataset
			+highestAgent(String) : DefaultStatisticalCategoryDataset
			+calculateSD(double[]) : DefaultStatisticalCategoryDataset
			+averageTime() : DefaultStatisticalCategoryDataset
			+messageSendPerIteration() : DefaultStatisticalCategoryDataset
			+messagesSize() : DefaultStatisticalCategoryDataset
		}

		class AlgorithmProblemResult {
			+problem : String
			+algorithm : String
			+avgPricePerIteration : Map<int, double>
			+totalGradePerIteration : Map<int, double>
			+iterationsTillBestPrice : int
			+bestGrade : double
			+lowestCostForAgentInBestIteration : double
			+lowestCostForAgentInBestIterationAgentName : String
			+highestCostForAgentInBestIteration : double
			+highestCostInForAgentBestIterationAgentName : String
			+totalMessagesInIter : Map<Integer, MsgInfo>
			+bestTotalGradePerIter : Map<Integer, Double>
		}

		class MsgInfo {
			+msgsNum : int
			+msgsSize : long
		}

		AlgorithmProblemResult --* MsgInfo

		DataCollector --* DataCollectionCommunicator
		DataCollector o-- IterationCollectedData
		DataCollectionCommunicatorBehaviour --|> Behaviour
		DataCollectionCommunicatorBehaviour --o DataCollectionCommunicator
		DataCollectionCommunicatorBehaviour o-- DataCollectionCommunicator
		DataCollector --> StatisticsHandler
		
		DataCollector -> PowerConsumptionUtils
	}


	'experiment'
	together {
		interface ExperimentBuilderInterface {
			+setNumOfIterations(int) : void
			+setAlgorithms(List<SmartHomeAgentBehaviour>) : void
			+setProblems(List<Problem>) : void
			+createExperiment() : Experiment
		}

		class ExperimentBuilder {
			+setNumOfIterations(int) : void
			+setAlgorithms(List<SmartHomeAgentBehaviour>) : void
			+setProblems(List<Problem>) : void

			+createExperiment() : Experiment
		}

		interface ExperimentInterface {
			+runExperiment() : void
			+stopExperiment() : void
			+algorithmProblemComboRunEnded(AlgorithmProblemResult) : void
			+algorithmProblemIterEnded(String, String) : void
		}

		class Experiment {
			+{static} maximumIterations : int
			+numOfIterations : int
			+runExperiment() : void
			+stopExperiment() : void
			+algorithmProblemComboRunEnded(AlgorithmProblemResult) : void
			+algorithmProblemIterEnded(String, String) : void
		}
	}

	class AlgoAddResult {
		+success: boolean
		+errorMsg: String
	}

	class ProblemLoadResult {
		-errors : List<String>

		+getErrors() : List<String>
		+addError(String) : void
		+addProblem(Problem) : void
	}

	ExperimentInterface <|-- Experiment
	ExperimentBuilderInterface <|-- ExperimentBuilder

	ExperimentBuilder --> Experiment : creates >
	Experiment o-- DataCollectionCommunicator
	Experiment *-- Problem
	SmartHomeAgent *- AgentData
	DataCollector --> AlgorithmProblemResult : creates
	DataCollectionCommunicator --> Experiment

	Experiment o-- AlgorithmProblemResult

	DataCollectionCommunicator --  SmartHomeAgentBehaviour
	DataCollectionCommunicator --> AgentIterationData
	DataCollector --> AgentIterationData
	DataCollectionCommunicatorBehaviour --> DFAgentDescription

	SmartHomeAgentBehaviour -> PowerConsumptionUtils
	SmartHomeAgent o- AgentIterationData

	PropertyWithData -> Actuator
	PropertyWithData --> Sensor
	PropertyWithData --> Prefix
	PropertyWithData --> RelationType
	AlgorithmDataHelper -> Actuator
	AlgorithmDataHelper --> Sensor

	ProblemLoadResult --o Problem
}

package PL #efefef{

	interface UiHandlerInterface {
		+showMainScreen() : void
		+showResultScreen(List<AlgorithmProblemResult>, Map<String, Map<Integer, Long>>) : void
		+notifyExperimentEnded(List<AlgorithmProblemResult>, Map<String, Map<Integer, Long>> ) : void
		+algorithmProblemIterEnded(String, String, float) : void
		+algorithmProblemComboRunEnded(String, String) : void
	}

	class UiHandler <<Observer>> {
		+showMainScreen() : void
		+showResultScreen(List<AlgorithmProblemResult>, Map<String, Map<Integer, Long>>) : void
		+notifyExperimentEnded(List<AlgorithmProblemResult>, Map<String, Map<Integer, Long>> ) : void
		+algorithmProblemIterEnded(String, String, float) : void
		+algorithmProblemComboRunEnded(String, String) : void

		+detach(DetachEvent) : void
	}

    class ExperimentConfigurationPresenter {
        +enter(ViewChangeEvent) : void
        +buttonClick(ClickEvent) : void
        +valueChange(ValueChangeEvent) : void
    }

    class ExperimentResultsPresenter {
        +enter(ViewChangeEvent) : void
        +addPowerConsumptionGraph(DefaultStatisticalCategoryDataset) : void
        +addHighestAgentGrapthGrapth(DefaultStatisticalCategoryDataset) : void
        +addLowestAgentGrapthGrapth(DefaultStatisticalCategoryDataset) : void
        +addAverageExperimentTime(DefaultStatisticalCategoryDataset) : void
        +addMessagesSentPerIteration(DefaultCategoryDataset) : void
        +addMessagesSizePerAlgo(DefaultCategoryDataset) : void
    }

    class ExperimentRunningPresenter {
        +enter(ViewChangeEvent) : void
        +incProgBar(String, String, float) : void
        +enableGoToResScreenBtn()
        +setStopExperimentCallable(Callable<Boolean>) : void
        +setNumOfIter(int) : void
        +setAlgorithmProblemPairs(List<ProblemAlgoPair>, int, int)
        +setProgressBarValue(String, String, float, boolean)
    }

	UiHandlerInterface <|-- UiHandler
	UiHandler o-- ExperimentRunningPresenter
	UiHandler o-- ExperimentResultsPresenter
	UiHandler o-- ExperimentConfigurationPresenter

}

package DAL #efefef{

    interface FileSaverInterface {
    	+saveExpirimentResult(List<AlgorithmProblemResult>) : void
    	+setTotalPowerConsumption(Map<String, List<Double>>) : void
    }

	class CsvHandler {
    	+saveExpirimentResult(List<AlgorithmProblemResult>) : void
    	+setTotalPowerConsumption(Map<String, List<Double>>) : void
	}

    interface JsonLoaderInterface {
        +loadDevices(String) : Map<int, List<Device>>
        +loadProblems(List<String>) : List<Problem>
        +getAllProblemNames() : Map<Integer, List<String>>
    }

	class JsonsLoader {
		+loadDevices(String) : Map<int, List<Device>>
        +loadProblems(List<String>) : List<Problem>
        +getAllProblemNames() : Map<Integer, List<String>>
	}

    interface AlgoLoaderInterface {
		+loadAlgorithms(List<String>) : SmartHomeAgentBehaviour
        +getAllAlgoNames() : List<String>
        +addAlgoToSystem(String, String) : void
    }

	class AlgorithmLoader {
		+loadAlgorithms(List<String>) : SmartHomeAgentBehaviour
        +getAllAlgoNames() : List<String>
        +addAlgoToSystem(String, String) : void
	}

    interface DataAccessControllerInterface {
        +getProblems(List<String>) : List<Problem>
        +getAvailableAlgorithms() : List<String>
        +getAvailableProblems() : Map<Integer, List<String>>
        +getAlgorithms(List<String>) : List<SmartHomeAgentBehaviour>
        +addAlgorithmToSystem(String, String) : AlgoAddResult
        +saveExpirimentResult(List<AlgorithmProblemResult>) : void
    }

	class DataAccessController {
		+getProblems(List<String>) : List<Problem>
		+getAvailableAlgorithms() : List<String>
        +getAvailableProblems() : List<String>
		+getAlgorithms(List<String>) : List<SmartHomeAgentBehaviour>
		+addAlgorithmToSystem(String, String) : void
		+saveExpirimentResult(List<AlgorithmProblemResult>) : void
	}

	DataAccessController --> AlgoLoaderInterface
	DataAccessController --> JsonLoaderInterface
	DataAccessController --> FileSaverInterface

	JsonLoaderInterface <|-- JsonsLoader
	AlgoLoaderInterface <|-- AlgorithmLoader
	DataAccessControllerInterface <|-- DataAccessController
	FileSaverInterface <|-- CsvHandler
}

together {
	class Service <<Observable>> {
		+setObserver(UiHandler) : void
		+addAlgorithmsToExperiment(List<SmartHomeAgentBehaviour>, int) : void
		+loadProblems(List<Problem>) : ProblemLoadResult
		+runExperimrent() : void
		+stopExperiment() : void
		+getExperimentResults() : List<AlgorithmProblemResult>
	    +experimentEnded(List<AlgorithmProblemResult>) : void
	    +experimentEndedWithError(Exception) : void
	    +saveExperimentResults(List<AlgorithmProblemResult>) : void
	    +saveResults(Map<String, List<Double>>, List<AlgorithmProblemResult>) : boolean
	}

    class Config {
        +{static} loadConfig() : void
        +{static} getStringProperty(String) : String
        +{static} getIntProperty(String) : int
        +{static} getDoubleProperty(String) : double
        +{static} getBooleanProperty(String) : boolean
    }
}

class SmartHomeAlgorithm <<Not Implemented>> {
	+doIteration() : void
}

'**********out of package connections:************
Service --> ExperimentInterface
Experiment --> Service
Service --> AlgorithmProblemResult
Service --> ExperimentBuilderInterface
Service --> AlgoAddResult

JsonsLoader --> Device : creates >
JsonsLoader -> Problem : creates >
AlgorithmLoader --> SmartHomeAgentBehaviour : creates >
DataAccessController --> Problem
DataCollectionCommunicator --|> Agent

ExperimentBuilder --> DataAccessControllerInterface

CsvHandler -> AlgorithmProblemResult : saves

SmartHomeAlgorithm --|> SmartHomeAgentBehaviour

UiHandler o-- Service
ExperimentConfigurationPresenter *-- Service

SmartHomeAgentBehaviour *-- AgentIterationData
SmartHomeAgentBehaviour *-- IterationCollectedData

ExperimentConfigurationPresenter --> AlgoAddResult

AlgoLoaderInterface --> AlgoAddResult
DataAccessControllerInterface --> AlgoAddResult
DataAccessControllerInterface --> ProblemLoadResult
JsonLoaderInterface --> ProblemLoadResult

Service --> ProblemLoadResult



UiHandler --> Config
AlgorithmLoader --> Config
JsonsLoader --> Config
CsvHandler --> Config

@enduml