@startuml
'skinparam classAttributeIconSize 0
'left to right direction
skinparam linetype ortho


package BL {

	package JADE {

		abstract class Agent <<Abstract, JADE>>
		abstract class Behaviour <<Abstract, JADE>>
		Behaviour -- Agent
	}

	package Problems {
		
		class Device {
			+name : String
			+subtype : String
			+location : String
		}

		class Sensor {
			+currState : double
			+sensingProperties : List<String>
			+change(double) : void
		}

		class Actuator {
			+actions : List<Action>
			+act(Sensors, Action) : void
		}

		class Effect {
			+property : String
			+delta : double
		}

		class Action {
			+name : String
			+powerConsumption : double
			+effects : List<Effect>
		}

		enum RelationType {
			EQ
			GEQ
			LEQ
			GT
			LT
		}

		enum Prefix {
			BEFORE
			AFTER
			AT
		}

		class Rule {
			+isActive : boolean
			+device : Device
			+property : String
			+ruleValue : double
			+prefixType : RelationType
			+relationValue : double
			+prefix : Prefix
		}

		class AgentData {
			+name : String
			+neighbors : List<AgentData>
			+backgroundLoad : double[Problem.horizon]
			+houseType : int
			+rules : List<Rule>
			+actuators : List<Actuator>
			+sensors : List<Sensor>
		}

		class Problem {
			id : String
			allDevices : Map<Integer, List<Device>>
			allHomes : List<AgentData>
			horizon : int
			granularity : int
			priceScheme : double[horizon]
		}

		Device <|-- Sensor
		Device <|-- Actuator

		Actuator o-- Action
		Action o-- Effect

		Problem *-- AgentData
		AgentData o-- Sensor
		AgentData o-- Actuator
		AgentData o- AgentData
		AgentData o-- Rule

		Prefix <-- Rule
		RelationType <-- Rule
		Rule o-- Device
	}

	package Agents {
		class SmartHomeAgent {
			+agentData : agentData
			+bestIteration : AgentIterationData
			+currIteration : AgentIterationData
		}

		Note "run(){\n\twhile(!stop){\n\t\t...\n\t\tdoIteration();\n\t\tsendIterationToCollector();\n\t\t..\n\t}\n}" as smabNote

		abstract class SmartHomeAgentBehaviour <<Abstract>> {
			+agent : SmartHomeAgent
			+name : String
			#{abstract} doIteration() : void
			-sendIterationToCollector(AgentIterationData) : void
		}

		class DBA {
			+doIteration() : void
		}

		class DSA {
			+doIteration() : void
		}

		class Algo3 {
			+doIteration : void
		}

		class Algo4 {
			+doIteration() : void
		}


		Agent <|-- SmartHomeAgent
		Behaviour <|-- SmartHomeAgentBehaviour
		SmartHomeAgent -- SmartHomeAgentBehaviour

		SmartHomeAgentBehaviour .. smabNote

		Problem *-- Device

		SmartHomeAgentBehaviour <|-- DBA
		SmartHomeAgentBehaviour <|-- DSA
		SmartHomeAgentBehaviour <|-- Algo3
		SmartHomeAgentBehaviour <|-- Algo4
	}

	package DataObjects {

		class AgentIterationData {
			+iterNum : int
			+agentName : String
			+price : double
			+powerConsumption : double
		}

		class IterationCollectedData {

			+problemId : String
			+algorithm : String
		} 

		AgentIterationData <|-- IterationCollectedData
	}

	package DataCollection {

		class DataCollector {
		}

		class DataCollectionCommunicator {

		}

		class DataCollectionCommunicatorBehaviour {

		}

		Note "One per <algorithm, data set>" as CollectorCommNote

		class StatisticsHandler {

		}

		class IterationAvgPrice {
			+iter : int
			+avgPrice : double
		}


		class AlgorithmProblemResult {
			+problem : Problem
			+algorithm : SmartHomeAgentBehaviour
			+avgPricePerIteration : Map<int, IterationAvgPrice>
			+iterationsTillBestPrice : int
			+lowestCostInBestIteration : double
			+lowestCostInBestIterationAgentName : String
			+highestCostInWBestIteration : double
			+highestCostInWBestIterationAgentName : String
		}

		DataCollector o-- DataCollectionCommunicator
		DataCollector o-- IterationCollectedData
		DataCollectionCommunicatorBehaviour --|> Behaviour
		DataCollectionCommunicatorBehaviour --o DataCollectionCommunicator
		DataCollector --> StatisticsHandler

		DataCollectionCommunicator .. CollectorCommNote

		SmartHomeAgent o-- AgentIterationData
		AlgorithmProblemResult o-- IterationAvgPrice
	}

	class Experiment {
		-dataCollector : DataCollector
		-Problems : List<Problem>
		-Algorithms : List<SmartHomeAgentBehaviour>
		+runExperiment() : void
		+stop() : void
	}

	class Service <<Observable>> {
		+createExperiment(List<Problem>, List<SmartHomeAgentBehaviour>) : boolean?
		+runExperimrent() : boolean?
		+stopExperiment() : boolean?
		+getExperimentResults() : List<AlgorithmProblemResult>

	}

	Service -- Experiment
	Service --> AlgorithmProblemResult
	Experiment o-- DataCollector
	Experiment *-- Problem
	SmartHomeAgent *- AgentData
	DataCollector o-- AlgorithmProblemResult

	Experiment --> AlgorithmProblemResult : creates

	DataCollectionCommunicator -- SmartHomeAgentBehaviour
	DataCollectionCommunicator --> AgentIterationData
	DataCollector --> AgentIterationData
}

package PL {
	class UiHandler <<Observer>> {

	}

	class ChartViewer {

	}

	UiHandler --> ChartViewer
}

package DAL {

	class ExcelHandler {
		+createExcel(...)

	}

    interface JsonLoaderInterface {
        +loadDevices(String) : Map<int, Device>
        +loadProblem(String) : Problem
        +getAllProblemNames() : List<String>
    }

	class JsonsLoader {
		+loadDevices(String) : Map<int, Device>
		+loadProblem(String) : Problem
		+getAllProblemNames() : List<String>
	}

	class AlgorithmLoader {
		+loadAlgorithm(String) : SmartHomeAgentBehaviour
	}

	class DataAccessController {
		+getProblems(List<String>) : List<Problem>
		+getAlgorithms(List<String>) : List<SmartHomeAgentBehaviour>
		+addAlgorithmToSystem(String) : void
	}

	DataAccessController --> AlgorithmLoader
	DataAccessController --> JsonsLoader
	DataAccessController --> ExcelHandler

	JsonLoaderInterface <|-- JsonsLoader
}


class SmartHomeAlgorithm <<Not Implemented>> {
	-doIteration() : void
}

'**********out of package connections:************
JsonsLoader --> Device : creates
JsonsLoader -> Problem : creates
AlgorithmLoader --> SmartHomeAgentBehaviour

Experiment -> DataCollector
Experiment --> DataAccessController

ExcelHandler -> AlgorithmProblemResult
Service -right-> DataAccessController

SmartHomeAlgorithm --|> SmartHomeAgentBehaviour

UiHandler -- Service


@enduml