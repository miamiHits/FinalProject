@startuml
'skinparam classAttributeIconSize 0
scale 1.5
'left to right direction
skinparam linetype ortho


package BL {

	package JADE <<External library>> {

		abstract class Agent <<Abstract, JADE>> {
		    {abstract} #Setup() : void
		    addBehaviour(Behaviour b) : void
		}

		abstract class Behaviour <<Abstract, JADE>>
		Behaviour -- Agent

		class DFAgentDescription
	}

	package DataObjects{
		
		class Device {
			+name : String
			+subtype : String
			+location : String
		}

		class Sensor {
			+currState : double
			+sensingProperties : List<String>
			+change(double) : void
		}

		class Actuator {
			+act(Map<Sensor, double>, Action) : void
		}

		class Effect {
			+property : String
			+delta : double
		}

		class Action {
			+name : String
			+powerConsumption : double
		}

		enum RelationType {
			EQ
			GEQ
			LEQ
			GT
			LT
		}

		enum Prefix {
			BEFORE
			AFTER
			AT
		}

		class Rule {
			+isActive : boolean
			+property : String
			+ruleValue : double
			+relationValue : double
		}

		class AgentData {
			+name : String
			+backgroundLoad : double[Problem.horizon]
			+priceSchema : double[Problem.horizon]
			+houseType : int
			+numOfIterations : int
			+priceScheme : double[]
			+granularity : int
		}

		class Problem {
			id : String
			allDevices : Map<Integer, List<Device>>
			horizon : int
			granularity : int
			priceScheme : double[horizon]
		}

		Device <|-- Sensor
		Device <|-- Actuator

		Actuator o-- Action
		Action o-- Effect

		Problem *-- AgentData
		AgentData o-- Sensor
		AgentData o-- Actuator
		AgentData o-down- AgentData
		AgentData o-- Rule

		Prefix <-- Rule
		RelationType <-- Rule
		Rule o-- Device
	}

	package Agents {

		class AlgorithmDataHelper {
			+totalPriceConsumption : double
			+DeviceToTicks : Map<Actuator, List<Integer>>
			
			+allProperties : List<PropertyWithData>
			+buildNewPropertyData(Rule, boolean) : void
			+SetActuatorsAndSensors() : void
			+matchSensors(Action, PropertyWithData, boolean) : void
			+getSubsets(List<Integer>, int) : List<Set<int>>
			+calcPriceSchemeForAllNeighbours() : void
			+calcTotalPowerConsumption(double) : void
			+checkForPassiveRules() : void
			+calcHowLongDeviceNeedToWork(PropertyWithData) : double
			+goBackToStartValues() : void
		}

		class PropertyWithData {
			+name : String
			+min : double
			+max : double
			+targetValue : double
			+targetTick : double
			+deltaWhenWork : double
			+isPasiveOnly : boolean
			+powerConsumedInWork : double
			+deltaWhenWorkOffline : double
			+isLocation : boolean
			+relatedSensorsDelta : Map<String,Double>
			+relatedSensorsWhenWorkOfflineDelta : Map<String,Double>
			+calcAndUpdateCurrState(double, double, double[], boolean) : void
			+updateValueToSensor(double[], double, double, int, boolean) : double
		}

		class SmartHomeAgent {
			+{static} SERVICE_TYPE : String
			+{static} SERVICE_NAME : String
			+numOfIterations : int
			+iterationNum : int
			+isZEROIteration : boolean
			+cSum : double
			+problemId : String
			+algoId : String

			#setup() : void
			#takeDown() : void
			addBehaviour(Behaviour) : void
		}

		Note "action(){\n\twhile(!stop){\n\t\t...\n\t\tdoIteration();\n\t\tsendIterationToCollector();\n\t\t..\n\t}\n}" as smabNote

		abstract class SmartHomeAgentBehaviour <<Abstract>> {
			#{abstract} doIteration() : void
			#sendIterationToCollector() : void
			#sendIterationToNeighbors() : void
			+cloneBehaviour() : SmartHomeAgentBehaviour
			+{abstract} cloneBehaviour() : SmartHomeAgentBehaviour
			#waitForNeighbourMessages : List<ACLMessage>
			#parseMessages(List<ACLMessage>) : void
			#calcPrice(double[]) : double
			#initializeBehaviourWithAgent(SmartHomeAgent) : void
			#addBackgroundLoadToPriceScheme(double[]) : void
			+action() : void
			+done() : boolean
		}

		class DBA {
			+doIteration() : void
		}

		class DSA {
			+doIteration() : void
		}

		class Algo3 {
			+doIteration : void
		}

		class Algo4 {
			+doIteration() : void
		}


		Agent <|-- SmartHomeAgent
		SmartHomeAgentBehaviour --|> Behaviour
		SmartHomeAgent -- SmartHomeAgentBehaviour

		SmartHomeAgentBehaviour . smabNote

		Problem *-- Device

		SmartHomeAgentBehaviour <|-- DBA
		SmartHomeAgentBehaviour <|-- DSA
		SmartHomeAgentBehaviour <|-- Algo3
		SmartHomeAgentBehaviour <|-- Algo4

		DSA --> AlgorithmDataHelper
		DSA --> PropertyWithData

		AlgorithmDataHelper --> PropertyWithData
		AlgorithmDataHelper --> SmartHomeAgent
	}

	package IterationData {

		class AgentIterationData {
			+iterNum : int
			+agentName : String
			+price : double
			+powerConsumptionPerTick : double[]
		}

		class IterationCollectedData {

			+problemId : String
			+algorithm : String
		} 

		AgentIterationData <|-- IterationCollectedData
	}

	package DataCollection {

		class PowerConsumptionUtils <<Static>> {
			+{static} AE : double
			+{static} AC : double
			+{static} calculateCSum(List<double[]>, double[]) : double
			+{static} calculateTotalConsumptionWithPenalty(double, double[], double[], List<double[]>, double[]) : double
		}

		class DataCollector {
		    +numOfAgentsInProblems : Map<String, int>
		    +probAlgoToItAgentPrice : Map<ProblemAlgorithm, IterationAgentsPrice>
		    +probAlgoToResult : Map<ProblemAlgorithm, AlgorithmProblemResult>
		    +probToPriceScheme : Map<String, double[]>

		    +addData(IterationCollectedData) : void    
		}

		class DataCollectionCommunicator {
			+{static, final} SERVICE_TYPE : String
			+{static, final} SERVICE_NAME : String

			#setup() : void
			#takeDown() : void
		}

		class DataCollectionCommunicatorBehaviour {
		    +agent : DataCollectorCommunicator
			+action() : void
			+findAgents(String) : DFAgentDescription[]
		}

		class StatisticsHandler {
			calculateAvg(List<double>) : double
			getStatisticalSignificance(...) : double
		}

		class AlgorithmProblemResult {
			+problem : String
			+algorithm : String
			+avgPricePerIteration : Map<int, double>
			+iterationsTillBestPrice : int
			+bestPrice : double
			+lowestCostForAgentInBestIteration : double
			+lowestCostForAgentInBestIterationAgentName : String
			+highestCostForAgentInBestIteration : double
			+highestCostInForAgentBestIterationAgentName : String
		}

		Note "calculateCSum(allHomesSchedule, powerScheme) {...}" as UtilsCSumNote
		Note "calculateEPeak(CSum, newSchedule, oldSchedule, otherSchedules, powerScheme) {...}" as UtilsEPeakNote

		DataCollector --o DataCollectionCommunicator
		DataCollector o-- IterationCollectedData
		DataCollectionCommunicatorBehaviour --|> Behaviour
		DataCollectionCommunicatorBehaviour --o DataCollectionCommunicator
		DataCollector --> StatisticsHandler
		
		DataCollector --> PowerConsumptionUtils

		PowerConsumptionUtils .. UtilsEPeakNote
		PowerConsumptionUtils .. UtilsCSumNote
	}

	interface ExperimentBuilderInterface {
		+addNumOfIterations(int) : void
		+addAlgorithms(List<String>) : void
		+addProblems(List<String>) : void
		+addService(Service) : void
		+create() : Experiment
	}

	class ExperimentBuilder {
		+setNumOfIterations(int) : void
		+addAlgorithms(List<String>) : void
		+addProblems(List<String>) : void
	}

	interface ExperimentInterface {
		+runExperiment() : void
		+algorithmProblemComboRunEnded(AlgorithmProblemResult) : void
		+stop() : void
	}

	class Experiment {
		+{static} maximumIterations : int
		+numOfIterations : int
		+runExperiment() : void
		+algorithmProblemComboRunEnded(AlgorithmProblemResult) : void
		+stopExperiment() : void
	}

	ExperimentInterface <|-- Experiment
	ExperimentBuilderInterface <|-- ExperimentBuilder

	ExperimentBuilder --> Experiment : creates
	Experiment o-- DataCollectionCommunicator
	Experiment *-- Problem
	SmartHomeAgent *- AgentData
	DataCollector --> AlgorithmProblemResult : create
	DataCollectionCommunicator --> Experiment

	Experiment o-- AlgorithmProblemResult

	DataCollectionCommunicator "1" -- "1...*" SmartHomeAgentBehaviour
	DataCollectionCommunicator --> AgentIterationData
	DataCollector --> AgentIterationData
	DataCollectionCommunicatorBehaviour --> DFAgentDescription

	SmartHomeAgentBehaviour -> PowerConsumptionUtils
	SmartHomeAgent o- AgentIterationData

	PropertyWithData --> Actuator
	PropertyWithData --> Sensor
	PropertyWithData --> Prefix
	PropertyWithData --> RelationType
	AlgorithmDataHelper --> Actuator
	AlgorithmDataHelper --> Sensor
}

package PL {

	interface UiHandlerInterface {
		+notifyExperimentEnded(List<AlgorithmProblemResult>) : void
	}

	class UiHandler <<Observer>> {
		+showMainScreen() : void
		+showResultsScreen() : void
		+shoExperimentRunningScreen() : void
		+notifyExperimentEnded(List<AlgorithmProblemResult>) : void
		+notifyError(String) : void
	}

	class ChartViewer {
		+createPricePerIterChart(Map<int, double>, String) : LineChart
		+nameToNumBarChart(Map<String, int>) : BarChart
	}

	Note "createPricePerIterChart(iterToPriceMap, algoName)" as chartNote

	UiHandler --> ChartViewer
	UiHandlerInterface <|-- UiHandler
	ChartViewer . chartNote
}

package DAL {

    interface FileSaverInterface {
    	+saveExpirimentResult(List<AlgorithmProblemResult>) : void
    }

	class ExcelHandler {
    	+saveExpirimentResult(List<AlgorithmProblemResult>) : void
	}

    interface JsonLoaderInterface {
        +loadDevices(String) : Map<int, List<Device>>
        +loadProblems(List<String>) : List<Problem>
        +getAllProblemNames() : List<String>
    }

	class JsonsLoader {
		+loadDevices(String) : Map<int, List<Device>>
        +loadProblems(List<String>) : List<Problem>
        +getAllProblemNames() : List<String>
	}

    interface AlgoLoaderInterface {
		+loadAlgorithms(List<String>) : SmartHomeAgentBehaviour
        +getAllAlgoNames() : List<String>
        +addAlgoToSystem(String, String) : void
    }

	class AlgorithmLoader {
		+loadAlgorithms(List<String>) : SmartHomeAgentBehaviour
        +getAllAlgoNames() : List<String>
        +addAlgoToSystem(String, String) : void
	}

    interface DataAccessControllerInterface {
        +getProblems(List<String>) : List<Problem>
        +getAvailableAlgorithms() : List<String>
        +getAlgorithms(List<String>) : List<SmartHomeAgentBehaviour>
        +addAlgorithmToSystem(String, String) : void
        +saveExpirimentResult(List<AlgorithmProblemResult>) : void
    }

	class DataAccessController {
		+getProblems(List<String>) : List<Problem>
		+getAvailableAlgorithms() : List<String>
		+getAlgorithms(List<String>) : List<SmartHomeAgentBehaviour>
		+addAlgorithmToSystem(String, String) : void
		+saveExpirimentResult(List<AlgorithmProblemResult>) : void
	}

	DataAccessController --> AlgoLoaderInterface
	DataAccessController --> JsonLoaderInterface
	DataAccessController --> FileSaverInterface

	JsonLoaderInterface <|-- JsonsLoader
	AlgoLoaderInterface <|-- AlgorithmLoader
	DataAccessControllerInterface <|-- DataAccessController
	FileSaverInterface <|-- ExcelHandler
}

interface ServiceInterface {
	+addAlgorithmsToExperiment(List<String>, int) : void
	+addProblemsToExperiment(List<String>) : void
	+runExperimrent() : void
	+stopExperiment() : void
	+getExperimentResults() : List<AlgorithmProblemResult>
    +experimentEnded(List<AlgorithmProblemResult>) : void
    +saveExperimentResults(List<AlgorithmProblemResult>) : void
}

class Service <<Observable>> {
	+setObserver(UiHandler) : void
	+addAlgorithmsToExperiment(List<SmartHomeAgentBehaviour>, int) : void
	+addProblemsToExperiment(List<Problem>) : void
	+runExperimrent() : void
	+stopExperiment() : void
	+getExperimentResults() : List<AlgorithmProblemResult>
    +experimentEnded(List<AlgorithmProblemResult>) : void
    +experimentEndedWithError(Exception) : void
    +saveExperimentResults(List<AlgorithmProblemResult>) : void
}

Note "addAlgorithmsToExperiment(algoNames, numOfIterations){\n\t...\n\texperimentBuilder.addAlgorithms(algoNames);\n\ttexperimentBuilder.addNumOfIterations(numOfIterations);\n\t...\n}" as ServiceAddAlgoNote

ServiceInterface <|-- Service
Service .. ServiceAddAlgoNote

class SmartHomeAlgorithm <<Not Implemented>> {
	-doIteration() : void
}

'**********out of package connections:************
Service --> ExperimentInterface
Experiment --> Service
Service --> AlgorithmProblemResult
Service --> ExperimentBuilderInterface

JsonsLoader --> Device : creates >
JsonsLoader -> Problem : creates >
AlgorithmLoader --> SmartHomeAgentBehaviour : creates >
DataAccessController --> Problem
DataCollectionCommunicator --|> Agent

ExperimentBuilder --> DataAccessControllerInterface

ExcelHandler -> AlgorithmProblemResult : saves

SmartHomeAlgorithm --|> SmartHomeAgentBehaviour

UiHandler --> ServiceInterface
UiHandlerInterface <-- Service


@enduml