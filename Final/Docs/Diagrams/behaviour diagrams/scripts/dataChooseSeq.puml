@startuml
actor User as u
participant DataAccessController as DAC

activate u
activate UiHandler
activate Service


u -> UiHandler : select problems
alt Json files describing problems are available in the system

    UiHandler --> u : [opens a file selection dialog]
    note left
        user selects the Json
        files from the dialog
    end note
    u -> UiHandler : [selectedProblems]
    UiHandler -> Service : loadProblems(List<problemNames: String>)

    activate DAC
    Service -> DAC : getProblems(List<problemNames: String>)

    loop for each problem name
        activate JsonLoader
        DAC -> JsonLoader : loadProblem(String problemName)
        JsonLoader -> JsonLoader : verifyJson(String problemName)
        JsonLoader --> DAC : [Problem]
    end

    DAC -> JsonLoader : loadDevices(String devicesFileName)
    JsonLoader -> JsonLoader : verifyJson(String devicesFileName)
    JsonLoader --> DAC : [Devices]

    DAC -->Service : [List<Problem>]
    Service --> UiHandler : showSuccessMsg(msg: String)
    UiHandler --> u : [shows a success message]

else no available Json files describing problems in the system

    Service --> UiHandler : showErrorMessage(msg: String)
    UiHandler --> u : [shows a descriptive error message]

else one or more of the Json files is not a valid problem

    UiHandler --> u : [opens a file selection dialog]
    note left
        user selects the Json
        files from the dialog
    end note
    u -> UiHandler : [selectedProblems]
    UiHandler -> Service : loadProblems(List<problemNames: String>)

    activate DAC
    Service -> DAC : getProblems(List<problemNames: String>)

    activate JsonLoader
    DAC -> JsonLoader : loadProblem(String problemName)
    JsonLoader -> JsonLoader : verifyJson(String problemName)
    JsonLoader -> Service : [ParseException]
    Service --> UiHandler : showErrorMessage(msg: String)
    UiHandler --> u : [shows a descriptive error message]
end



@enduml